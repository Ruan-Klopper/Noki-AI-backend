// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProviderType {
  Canvas
  Google
  Microsoft
}

enum CourseSource {
  Canvas
  GoogleClassroom
}

enum TaskType {
  Canvas
  Project
  Personal
}

enum Priority {
  High
  Medium
  Low
}

enum ResourceType {
  Document
  Link
  Note
  Media
  AI_Generated
}

model User {
  id            String   @id @default(uuid())
  firstname     String
  lastname      String
  email         String   @unique
  password_hash String
  profile_image String?
  google_id     String?  @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  auth_providers AuthProvider[]
  projects       Project[]
  courses        Course[]
  tasks          Task[]
  todos          Todo[]
  resources      Resource[]

  @@map("users")
}

model AuthProvider {
  id                 String           @id @default(uuid())
  user_id            String
  type               AuthProviderType
  base_url           String?
  access_token_hash  String
  refresh_token_hash String?
  metadata           Json?
  created_at         DateTime         @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("auth_providers")
}

model Project {
  id          String   @id @default(uuid())
  user_id     String
  title       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tasks     Task[]
  resources Resource[]

  @@map("projects")
}

model Course {
  id          String       @id @default(uuid())
  user_id     String
  source      CourseSource
  external_id String
  title       String
  course_code String?
  time_zone   String?
  start_at    DateTime?
  end_at      DateTime?
  raw_data    Json?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // Relations
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tasks     Task[]
  resources Resource[]

  @@unique([user_id, external_id, source])
  @@map("courses")
}

model Task {
  id              String    @id @default(uuid())
  user_id         String
  project_id      String?
  course_id       String?
  title           String
  description     String?
  due_date        DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  type            TaskType
  priority        Priority?
  raw_canvas_data Json?

  // Relations
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  project   Project?   @relation(fields: [project_id], references: [id], onDelete: SetNull)
  course    Course?    @relation(fields: [course_id], references: [id], onDelete: SetNull)
  todos     Todo[]
  resources Resource[]

  @@map("tasks")
}

model Todo {
  id          String    @id @default(uuid())
  user_id     String
  task_id     String
  title       String
  description String?
  priority    Priority?
  due_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  task Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@map("todos")
}

model Resource {
  id          String       @id @default(uuid())
  user_id     String
  title       String
  description String?
  type        ResourceType
  url         String?
  file_path   String?
  metadata    Json?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  // Optional relations
  task_id    String?
  course_id  String?
  project_id String?

  // Relations
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [task_id], references: [id], onDelete: SetNull)
  course  Course?  @relation(fields: [course_id], references: [id], onDelete: SetNull)
  project Project? @relation(fields: [project_id], references: [id], onDelete: SetNull)

  @@map("resources")
}
